
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080034bc  080034bc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034bc  080034bc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080034c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000018  080034dc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080034dc  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070f2  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f1  00000000  00000000  00027133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00028a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  000291b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d3a  00000000  00000000  00029880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dde  00000000  00000000  000425ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6b7  00000000  00000000  0004b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daa4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf4  00000000  00000000  000daaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	08002d08 	.word	0x08002d08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	08002d08 	.word	0x08002d08

08000224 <SSD1306_Init>:
 * @retval Initialization status:
 *           - 0: SPI peripheral not initialized
 *           - 1: OLED initialized OK and ready to use
 */
uint8_t SSD1306_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/* Check that SPI peripheral is ready */
	if (HAL_SPI_GetState(&Spi_ssd1306Write) != HAL_SPI_STATE_READY)
 8000228:	4833      	ldr	r0, [pc, #204]	; (80002f8 <SSD1306_Init+0xd4>)
 800022a:	f002 fbf9 	bl	8002a20 <HAL_SPI_GetState>
 800022e:	4603      	mov	r3, r0
 8000230:	2b01      	cmp	r3, #1
 8000232:	d001      	beq.n	8000238 <SSD1306_Init+0x14>
	{
		return SSD1306_FAILED;
 8000234:	2300      	movs	r3, #0
 8000236:	e05d      	b.n	80002f4 <SSD1306_Init+0xd0>
	}

	/* Prepare to send command bits */
	SSD1306_CMD_ACCESS();
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	482f      	ldr	r0, [pc, #188]	; (80002fc <SSD1306_Init+0xd8>)
 800023e:	f001 fc67 	bl	8001b10 <HAL_GPIO_WritePin>

	/* Turn VDD (logic power) on and wait to come on */
//	SSD1306_LOGIC_POWER_EN();
	HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fd56 	bl	8000cf4 <HAL_Delay>

	/* Display off command */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_OFF);
 8000248:	20ae      	movs	r0, #174	; 0xae
 800024a:	f000 f9df 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Reset the screen */
	SSD1306_Reset();
 800024e:	f000 f859 	bl	8000304 <SSD1306_Reset>

	/* Set up charge pump */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_SET);
 8000252:	208d      	movs	r0, #141	; 0x8d
 8000254:	f000 f9da 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CHRG_PUMP_EN);
 8000258:	2014      	movs	r0, #20
 800025a:	f000 f9d7 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_SET);
 800025e:	20d9      	movs	r0, #217	; 0xd9
 8000260:	f000 f9d4 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_CHRG_PRD_VALUE);
 8000264:	20f1      	movs	r0, #241	; 0xf1
 8000266:	f000 f9d1 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Clear screen and update */
	SSD1306_Clear();
 800026a:	f000 f9c6 	bl	80005fa <SSD1306_Clear>

	/* Give power to display and wait to come on */
//	SSD1306_DISP_POWER_EN();
	HAL_Delay(100);
 800026e:	2064      	movs	r0, #100	; 0x64
 8000270:	f000 fd40 	bl	8000cf4 <HAL_Delay>

	/* Set oscillator frequency */
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_SET);
 8000274:	20d5      	movs	r0, #213	; 0xd5
 8000276:	f000 f9c9 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CLK_MAX);
 800027a:	20f0      	movs	r0, #240	; 0xf0
 800027c:	f000 f9c6 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Set display contrast */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_CONTRAST_CTRL);
 8000280:	2081      	movs	r0, #129	; 0x81
 8000282:	f000 f9c3 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CONTRAST_VALUE);
 8000286:	200f      	movs	r0, #15
 8000288:	f000 f9c0 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Multiplex ratio */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_MUX_RATIO_SET);
 800028c:	20a8      	movs	r0, #168	; 0xa8
 800028e:	f000 f9bd 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_MUX_RATIO_VALUE);
 8000292:	203f      	movs	r0, #63	; 0x3f
 8000294:	f000 f9ba 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Set addressing mode (horizontal address mode) */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_SET);
 8000298:	2020      	movs	r0, #32
 800029a:	f000 f9b7 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_ADDR_MODE_HORZ);
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f9b4 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Invert rows and columns */
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_COL127_SEG0);
 80002a4:	20a1      	movs	r0, #161	; 0xa1
 80002a6:	f000 f9b1 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_REMAP_ROW_DEC);
 80002aa:	20c8      	movs	r0, #200	; 0xc8
 80002ac:	f000 f9ae 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* COM pins hardware configuration */
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_SET);
 80002b0:	20da      	movs	r0, #218	; 0xda
 80002b2:	f000 f9ab 	bl	800060c <ssd1306_SPI_WriteCmd>
	SSD1306_SPI_WRITE_CMD(SSD1306_COM_HW_CONFIG_VALUE);
 80002b6:	2020      	movs	r0, #32
 80002b8:	f000 f9a8 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Display colours in normal mode */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_NORM_DISP);
 80002bc:	20a6      	movs	r0, #166	; 0xa6
 80002be:	f000 f9a5 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Deactivate scrolling */
	SSD1306_SPI_WRITE_CMD(SSD1306_DEACTIVATE_SCROLL);
 80002c2:	202e      	movs	r0, #46	; 0x2e
 80002c4:	f000 f9a2 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Display on */
	SSD1306_SPI_WRITE_CMD(SSD1306_CMD_DISP_ON);
 80002c8:	20af      	movs	r0, #175	; 0xaf
 80002ca:	f000 f99f 	bl	800060c <ssd1306_SPI_WriteCmd>

	/* Initialize structure values */
	SSD1306_Disp.CurrentX = 0;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <SSD1306_Init+0xdc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	801a      	strh	r2, [r3, #0]
	SSD1306_Disp.CurrentY = 0;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <SSD1306_Init+0xdc>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306_Disp.Initialized = 1;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <SSD1306_Init+0xdc>)
 80002dc:	2201      	movs	r2, #1
 80002de:	715a      	strb	r2, [r3, #5]
	SSD1306_Disp.state = SSD1306_STATE_READY;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <SSD1306_Init+0xdc>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	719a      	strb	r2, [r3, #6]

	/* Hang until screen has been updated */
	while (SSD1306_Disp.state != SSD1306_STATE_READY)
 80002e6:	bf00      	nop
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <SSD1306_Init+0xdc>)
 80002ea:	799b      	ldrb	r3, [r3, #6]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1fa      	bne.n	80002e8 <SSD1306_Init+0xc4>
		;

	/* Return OK */
	return SSD1306_OK;
 80002f2:	2301      	movs	r3, #1
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000234 	.word	0x20000234
 80002fc:	40011000 	.word	0x40011000
 8000300:	20000314 	.word	0x20000314

08000304 <SSD1306_Reset>:

/**
 * @brief  Reset the OLED display
 */
void SSD1306_Reset(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	SSD1306_RESET_LOW();
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <SSD1306_Reset+0x28>)
 8000310:	f001 fbfe 	bl	8001b10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 fced 	bl	8000cf4 <HAL_Delay>
	SSD1306_RESET_HIGH();
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SSD1306_Reset+0x28>)
 8000322:	f001 fbf5 	bl	8001b10 <HAL_GPIO_WritePin>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010c00 	.word	0x40010c00

08000330 <SSD1306_UpdateScreen>:
/**
 * @brief  Updates buffer from internal RAM to OLED with SSD1306 in horizontal addressing mode (blocks until interrupt function initialized)
 * @note   This function must be called each time you do some changes to OLED, to update buffer from RAM to OLED
 */
uint8_t SSD1306_UpdateScreen(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	/* Writing data to display buffer - non-blocking function with SPI and DMA */
	return ssd1306_SPI_WriteDisp(SSD1306_Buffer);
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <SSD1306_UpdateScreen+0x10>)
 8000336:	f000 f983 	bl	8000640 <ssd1306_SPI_WriteDisp>
 800033a:	4603      	mov	r3, r0
}
 800033c:	4618      	mov	r0, r3
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000034 	.word	0x20000034

08000344 <SSD1306_Fill>:
 * @brief  Fills entire OLED buffer with desired color
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill(uint8_t colour)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <SSD1306_Fill+0x14>
 8000354:	2300      	movs	r3, #0
 8000356:	e000      	b.n	800035a <SSD1306_Fill+0x16>
 8000358:	23ff      	movs	r3, #255	; 0xff
 800035a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035e:	4619      	mov	r1, r3
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <SSD1306_Fill+0x2c>)
 8000362:	f002 fcc9 	bl	8002cf8 <memset>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000034 	.word	0x20000034

08000374 <SSD1306_Fill_ToRight>:
 * @brief  Fills OLED with desired colour to right of indicated column (for horizontal and page addressing modes)
 * @note   @ref SSD1306_UpdateScreen() must be called after that in order to see updated LCD screen
 * @param  Color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_Fill_ToRight(uint8_t startCol, uint8_t colour)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	460a      	mov	r2, r1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 8000384:	2300      	movs	r3, #0
 8000386:	73fb      	strb	r3, [r7, #15]
 8000388:	e014      	b.n	80003b4 <SSD1306_Fill_ToRight+0x40>
	{
		memset(SSD1306_Buffer + startCol + (i * SSD1306_WIDTH), (colour == SSD1306_PX_CLR_BLACK) ? 0x00 : 0xFF, SSD1306_WIDTH - startCol);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	7bfa      	ldrb	r2, [r7, #15]
 800038e:	01d2      	lsls	r2, r2, #7
 8000390:	4413      	add	r3, r2
 8000392:	4a0c      	ldr	r2, [pc, #48]	; (80003c4 <SSD1306_Fill_ToRight+0x50>)
 8000394:	1898      	adds	r0, r3, r2
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d101      	bne.n	80003a0 <SSD1306_Fill_ToRight+0x2c>
 800039c:	2100      	movs	r1, #0
 800039e:	e000      	b.n	80003a2 <SSD1306_Fill_ToRight+0x2e>
 80003a0:	21ff      	movs	r1, #255	; 0xff
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80003a8:	461a      	mov	r2, r3
 80003aa:	f002 fca5 	bl	8002cf8 <memset>
	for (uint8_t i = 0; i < SSD1306_PAGES; i++)
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	3301      	adds	r3, #1
 80003b2:	73fb      	strb	r3, [r7, #15]
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d9e7      	bls.n	800038a <SSD1306_Fill_ToRight+0x16>
	}
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000034 	.word	0x20000034

080003c8 <SSD1306_DrawPixel>:
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 * @param  color: Color to be used for screen fill. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 */
void SSD1306_DrawPixel(uint16_t x, uint16_t y, uint8_t colour)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	80fb      	strh	r3, [r7, #6]
 80003d2:	460b      	mov	r3, r1
 80003d4:	80bb      	strh	r3, [r7, #4]
 80003d6:	4613      	mov	r3, r2
 80003d8:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80003da:	88fb      	ldrh	r3, [r7, #6]
 80003dc:	2b7f      	cmp	r3, #127	; 0x7f
 80003de:	d848      	bhi.n	8000472 <SSD1306_DrawPixel+0xaa>
 80003e0:	88bb      	ldrh	r3, [r7, #4]
 80003e2:	2b1f      	cmp	r3, #31
 80003e4:	d845      	bhi.n	8000472 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306_Disp.Inverted)
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <SSD1306_DrawPixel+0xb4>)
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d006      	beq.n	80003fc <SSD1306_DrawPixel+0x34>
	{
		colour = !colour;
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf0c      	ite	eq
 80003f4:	2301      	moveq	r3, #1
 80003f6:	2300      	movne	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (colour == SSD1306_PX_CLR_WHITE)
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d11a      	bne.n	8000438 <SSD1306_DrawPixel+0x70>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000402:	88fa      	ldrh	r2, [r7, #6]
 8000404:	88bb      	ldrh	r3, [r7, #4]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b298      	uxth	r0, r3
 800040a:	4603      	mov	r3, r0
 800040c:	01db      	lsls	r3, r3, #7
 800040e:	4413      	add	r3, r2
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <SSD1306_DrawPixel+0xb8>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	b25a      	sxtb	r2, r3
 8000416:	88bb      	ldrh	r3, [r7, #4]
 8000418:	f003 0307 	and.w	r3, r3, #7
 800041c:	2101      	movs	r1, #1
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	b25b      	sxtb	r3, r3
 8000424:	4313      	orrs	r3, r2
 8000426:	b259      	sxtb	r1, r3
 8000428:	88fa      	ldrh	r2, [r7, #6]
 800042a:	4603      	mov	r3, r0
 800042c:	01db      	lsls	r3, r3, #7
 800042e:	4413      	add	r3, r2
 8000430:	b2c9      	uxtb	r1, r1
 8000432:	4a13      	ldr	r2, [pc, #76]	; (8000480 <SSD1306_DrawPixel+0xb8>)
 8000434:	54d1      	strb	r1, [r2, r3]
 8000436:	e01d      	b.n	8000474 <SSD1306_DrawPixel+0xac>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000438:	88fa      	ldrh	r2, [r7, #6]
 800043a:	88bb      	ldrh	r3, [r7, #4]
 800043c:	08db      	lsrs	r3, r3, #3
 800043e:	b298      	uxth	r0, r3
 8000440:	4603      	mov	r3, r0
 8000442:	01db      	lsls	r3, r3, #7
 8000444:	4413      	add	r3, r2
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <SSD1306_DrawPixel+0xb8>)
 8000448:	5cd3      	ldrb	r3, [r2, r3]
 800044a:	b25a      	sxtb	r2, r3
 800044c:	88bb      	ldrh	r3, [r7, #4]
 800044e:	f003 0307 	and.w	r3, r3, #7
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	b25b      	sxtb	r3, r3
 800045a:	43db      	mvns	r3, r3
 800045c:	b25b      	sxtb	r3, r3
 800045e:	4013      	ands	r3, r2
 8000460:	b259      	sxtb	r1, r3
 8000462:	88fa      	ldrh	r2, [r7, #6]
 8000464:	4603      	mov	r3, r0
 8000466:	01db      	lsls	r3, r3, #7
 8000468:	4413      	add	r3, r2
 800046a:	b2c9      	uxtb	r1, r1
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <SSD1306_DrawPixel+0xb8>)
 800046e:	54d1      	strb	r1, [r2, r3]
 8000470:	e000      	b.n	8000474 <SSD1306_DrawPixel+0xac>
		return;
 8000472:	bf00      	nop
	}
}
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	20000314 	.word	0x20000314
 8000480:	20000034 	.word	0x20000034

08000484 <SSD1306_GotoXY>:
 * @brief  Sets cursor pointer to desired location for strings
 * @param  x: X location. This parameter can be a value between 0 and SSD1306_WIDTH - 1
 * @param  y: Y location. This parameter can be a value between 0 and SSD1306_HEIGHT - 1
 */
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	460a      	mov	r2, r1
 800048e:	80fb      	strh	r3, [r7, #6]
 8000490:	4613      	mov	r3, r2
 8000492:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306_Disp.CurrentX = x;
 8000494:	4a05      	ldr	r2, [pc, #20]	; (80004ac <SSD1306_GotoXY+0x28>)
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	8013      	strh	r3, [r2, #0]
	SSD1306_Disp.CurrentY = y;
 800049a:	4a04      	ldr	r2, [pc, #16]	; (80004ac <SSD1306_GotoXY+0x28>)
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	8053      	strh	r3, [r2, #2]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000314 	.word	0x20000314

080004b0 <SSD1306_Putc>:
 * @param  *Font: Pointer to @ref FontDef_t structure with used font
 * @param  color: Color used for drawing. This parameter can be a value of @ref SSD1306_COLOR_t enumeration
 * @retval Character written
 */
char SSD1306_Putc(char ch, FontDef_t *Font, uint8_t colour)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 80004c0:	4b3a      	ldr	r3, [pc, #232]	; (80005ac <SSD1306_Putc+0xfc>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
	if (
 80004cc:	2b7f      	cmp	r3, #127	; 0x7f
 80004ce:	dc07      	bgt.n	80004e0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306_Disp.CurrentY + Font->FontHeight))
 80004d0:	4b36      	ldr	r3, [pc, #216]	; (80005ac <SSD1306_Putc+0xfc>)
 80004d2:	885b      	ldrh	r3, [r3, #2]
 80004d4:	461a      	mov	r2, r3
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	785b      	ldrb	r3, [r3, #1]
 80004da:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306_Disp.CurrentX + Font->FontWidth) ||
 80004dc:	2b1f      	cmp	r3, #31
 80004de:	dd01      	ble.n	80004e4 <SSD1306_Putc+0x34>
	{
		/* Error */
		return 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	e05e      	b.n	80005a2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	e04b      	b.n	8000582 <SSD1306_Putc+0xd2>
	{
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	685a      	ldr	r2, [r3, #4]
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	3b20      	subs	r3, #32
 80004f2:	6839      	ldr	r1, [r7, #0]
 80004f4:	7849      	ldrb	r1, [r1, #1]
 80004f6:	fb01 f303 	mul.w	r3, r1, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	440b      	add	r3, r1
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4413      	add	r3, r2
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++)
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	e030      	b.n	8000570 <SSD1306_Putc+0xc0>
		{
			if ((b << j) & 0x8000)
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800051a:	2b00      	cmp	r3, #0
 800051c:	d010      	beq.n	8000540 <SSD1306_Putc+0x90>
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), colour);
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <SSD1306_Putc+0xfc>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	b29b      	uxth	r3, r3
 8000526:	4413      	add	r3, r2
 8000528:	b298      	uxth	r0, r3
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <SSD1306_Putc+0xfc>)
 800052c:	885a      	ldrh	r2, [r3, #2]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	b29b      	uxth	r3, r3
 8000532:	4413      	add	r3, r2
 8000534:	b29b      	uxth	r3, r3
 8000536:	79ba      	ldrb	r2, [r7, #6]
 8000538:	4619      	mov	r1, r3
 800053a:	f7ff ff45 	bl	80003c8 <SSD1306_DrawPixel>
 800053e:	e014      	b.n	800056a <SSD1306_Putc+0xba>
			}
			else
			{
				SSD1306_DrawPixel(SSD1306_Disp.CurrentX + j, (SSD1306_Disp.CurrentY + i), !colour);
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <SSD1306_Putc+0xfc>)
 8000542:	881a      	ldrh	r2, [r3, #0]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	b29b      	uxth	r3, r3
 8000548:	4413      	add	r3, r2
 800054a:	b298      	uxth	r0, r3
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <SSD1306_Putc+0xfc>)
 800054e:	885a      	ldrh	r2, [r3, #2]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	b29b      	uxth	r3, r3
 8000554:	4413      	add	r3, r2
 8000556:	b299      	uxth	r1, r3
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf0c      	ite	eq
 800055e:	2301      	moveq	r3, #1
 8000560:	2300      	movne	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	f7ff ff2f 	bl	80003c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++)
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	3301      	adds	r3, #1
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	4293      	cmp	r3, r2
 800057a:	d3c8      	bcc.n	800050e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	461a      	mov	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	4293      	cmp	r3, r2
 800058c:	d3ad      	bcc.n	80004ea <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306_Disp.CurrentX += Font->FontWidth;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <SSD1306_Putc+0xfc>)
 8000590:	881a      	ldrh	r2, [r3, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b29b      	uxth	r3, r3
 8000598:	4413      	add	r3, r2
 800059a:	b29a      	uxth	r2, r3
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <SSD1306_Putc+0xfc>)
 800059e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000314 	.word	0x20000314

080005b0 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, uint8_t colour)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	4613      	mov	r3, r2
 80005bc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 80005be:	e012      	b.n	80005e6 <SSD1306_Puts+0x36>
	{
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, colour) != *str)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	79fa      	ldrb	r2, [r7, #7]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff71 	bl	80004b0 <SSD1306_Putc>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d002      	beq.n	80005e0 <SSD1306_Puts+0x30>
		{
			/* Return error */
			return *str;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	e008      	b.n	80005f2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
	while (*str)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1e8      	bne.n	80005c0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	781b      	ldrb	r3, [r3, #0]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <SSD1306_Clear>:

/**
 * @brief  Clears the screen
 */
void SSD1306_Clear(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
	SSD1306_Fill(SSD1306_PX_CLR_BLACK);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fea0 	bl	8000344 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000604:	f7ff fe94 	bl	8000330 <SSD1306_UpdateScreen>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <ssd1306_SPI_WriteCmd>:
 * @brief  Writes a 8-bit command to the ssd1306 - this function blocks while sending data
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 * @param  uint8_t len - length of data to be sent
 */
void ssd1306_SPI_WriteCmd(uint8_t command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	SSD1306_CMD_ACCESS();
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <ssd1306_SPI_WriteCmd+0x2c>)
 800061c:	f001 fa78 	bl	8001b10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&Spi_ssd1306Write, &command, 1, SSD1306_SPI_TIMEOUT);
 8000620:	1df9      	adds	r1, r7, #7
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	2201      	movs	r2, #1
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <ssd1306_SPI_WriteCmd+0x30>)
 800062a:	f001 ff0f 	bl	800244c <HAL_SPI_Transmit>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40011000 	.word	0x40011000
 800063c:	20000234 	.word	0x20000234

08000640 <ssd1306_SPI_WriteDisp>:
/**
 * @brief  Fills the display data buffer with new screen using DMA to transfer (length is size of SSD1306 buffer defined in ssd1306.c)
 * @param  uint8_t* pTxBuffer - pointer to the data buffer
 */
uint8_t ssd1306_SPI_WriteDisp(uint8_t *pTxBuffer)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	uint8_t state = SSD1306_Disp.state;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <ssd1306_SPI_WriteDisp+0x48>)
 800064a:	799b      	ldrb	r3, [r3, #6]
 800064c:	73fb      	strb	r3, [r7, #15]

	if (state == SSD1306_STATE_READY)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d113      	bne.n	800067c <ssd1306_SPI_WriteDisp+0x3c>
	{
		/* Set state to busy */
		SSD1306_Disp.state = SSD1306_STATE_BUSY;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <ssd1306_SPI_WriteDisp+0x48>)
 8000656:	2201      	movs	r2, #1
 8000658:	719a      	strb	r2, [r3, #6]

		/* Set D/C high for data buffer access */
		SSD1306_DISP_ACCESS();
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <ssd1306_SPI_WriteDisp+0x4c>)
 8000660:	f001 fa56 	bl	8001b10 <HAL_GPIO_WritePin>

		/* DMA enabled send with SPI - callback function run when complete */
		if (HAL_SPI_Transmit_DMA(&Spi_ssd1306Write, pTxBuffer, (uint16_t)sizeof(SSD1306_Buffer)) != HAL_OK)
 8000664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <ssd1306_SPI_WriteDisp+0x50>)
 800066c:	f002 f82a 	bl	80026c4 <HAL_SPI_Transmit_DMA>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <ssd1306_SPI_WriteDisp+0x3c>
		{
			SSD1306_Disp.state = SSD1306_SPI_ERROR;
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <ssd1306_SPI_WriteDisp+0x48>)
 8000678:	2202      	movs	r2, #2
 800067a:	719a      	strb	r2, [r3, #6]
		}
	}

	return state;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000314 	.word	0x20000314
 800068c:	40011000 	.word	0x40011000
 8000690:	20000234 	.word	0x20000234

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 faca 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f866 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f902 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 f8da 	bl	800085c <MX_DMA_Init>
  MX_SPI2_Init();
 80006a8:	f000 f89c 	bl	80007e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b2:	4827      	ldr	r0, [pc, #156]	; (8000750 <main+0xbc>)
 80006b4:	f001 fa2c 	bl	8001b10 <HAL_GPIO_WritePin>

  // Initialize OLED display
  if(SSD1306_Init() != SSD1306_OK) {
 80006b8:	f7ff fdb4 	bl	8000224 <SSD1306_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d001      	beq.n	80006c6 <main+0x32>
	  Error_Handler();
 80006c2:	f000 f969 	bl	8000998 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	static int xPos = 5;
	if(SSD1306_Disp.state == SSD1306_STATE_READY) {
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <main+0xc0>)
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d120      	bne.n	8000712 <main+0x7e>
		SSD1306_Fill_ToRight(xPos - 1, SSD1306_PX_CLR_BLACK);
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <main+0xc4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fe49 	bl	8000374 <SSD1306_Fill_ToRight>
		SSD1306_GotoXY(xPos, 5);
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <main+0xc4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff feca 	bl	8000484 <SSD1306_GotoXY>
		SSD1306_Puts("Hello", &Font_7x10, SSD1306_PX_CLR_WHITE);
 80006f0:	2201      	movs	r2, #1
 80006f2:	491a      	ldr	r1, [pc, #104]	; (800075c <main+0xc8>)
 80006f4:	481a      	ldr	r0, [pc, #104]	; (8000760 <main+0xcc>)
 80006f6:	f7ff ff5b 	bl	80005b0 <SSD1306_Puts>
		SSD1306_GotoXY(xPos, 21);
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <main+0xc4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	2115      	movs	r1, #21
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff febe 	bl	8000484 <SSD1306_GotoXY>
		SSD1306_Puts("World", &Font_7x10, SSD1306_PX_CLR_WHITE);
 8000708:	2201      	movs	r2, #1
 800070a:	4914      	ldr	r1, [pc, #80]	; (800075c <main+0xc8>)
 800070c:	4815      	ldr	r0, [pc, #84]	; (8000764 <main+0xd0>)
 800070e:	f7ff ff4f 	bl	80005b0 <SSD1306_Puts>
	}

	if(SSD1306_UpdateScreen() == SSD1306_SPI_ERROR) {
 8000712:	f7ff fe0d 	bl	8000330 <SSD1306_UpdateScreen>
 8000716:	4603      	mov	r3, r0
 8000718:	2b02      	cmp	r3, #2
 800071a:	d101      	bne.n	8000720 <main+0x8c>
		Error_Handler();
 800071c:	f000 f93c 	bl	8000998 <Error_Handler>
	};

	xPos++;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <main+0xc4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <main+0xc4>)
 8000728:	6013      	str	r3, [r2, #0]
	if(xPos == 80) {
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <main+0xc4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b50      	cmp	r3, #80	; 0x50
 8000730:	d102      	bne.n	8000738 <main+0xa4>
		xPos = 5;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <main+0xc4>)
 8000734:	2205      	movs	r2, #5
 8000736:	601a      	str	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000738:	2110      	movs	r1, #16
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <main+0xd4>)
 800073c:	f001 fa00 	bl	8001b40 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000740:	2120      	movs	r1, #32
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <main+0xd4>)
 8000744:	f001 f9fc 	bl	8001b40 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 8000748:	2019      	movs	r0, #25
 800074a:	f000 fad3 	bl	8000cf4 <HAL_Delay>
  {
 800074e:	e7ba      	b.n	80006c6 <main+0x32>
 8000750:	40010c00 	.word	0x40010c00
 8000754:	20000314 	.word	0x20000314
 8000758:	20000008 	.word	0x20000008
 800075c:	20000000 	.word	0x20000000
 8000760:	08002d20 	.word	0x08002d20
 8000764:	08002d28 	.word	0x08002d28
 8000768:	40011000 	.word	0x40011000

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b090      	sub	sp, #64	; 0x40
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	2228      	movs	r2, #40	; 0x28
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fabc 	bl	8002cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2310      	movs	r3, #16
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f9e6 	bl	8001b74 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007ae:	f000 f8f3 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fc54 	bl	8002078 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8df 	bl	8000998 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3740      	adds	r7, #64	; 0x40
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
	Spi_ssd1306Write.Instance = SPI2;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_SPI2_Init+0x6c>)
 80007ea:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <MX_SPI2_Init+0x70>)
 80007ec:	601a      	str	r2, [r3, #0]
	Spi_ssd1306Write.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_SPI2_Init+0x6c>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
	Spi_ssd1306Write.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_SPI2_Init+0x6c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
	Spi_ssd1306Write.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_SPI2_Init+0x6c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	Spi_ssd1306Write.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
	Spi_ssd1306Write.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_SPI2_Init+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
	Spi_ssd1306Write.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	619a      	str	r2, [r3, #24]
	Spi_ssd1306Write.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	Spi_ssd1306Write.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_SPI2_Init+0x6c>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
	Spi_ssd1306Write.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
	Spi_ssd1306Write.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_SPI2_Init+0x6c>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	Spi_ssd1306Write.Init.CRCPolynomial = 10;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c

	Spi_ssd1306Write.hdmatx = &hdma_spi2_tx;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_SPI2_Init+0x6c>)
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <MX_SPI2_Init+0x74>)
 8000838:	649a      	str	r2, [r3, #72]	; 0x48

  if (HAL_SPI_Init(&Spi_ssd1306Write) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_SPI2_Init+0x6c>)
 800083c:	f001 fd82 	bl	8002344 <HAL_SPI_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000846:	f000 f8a7 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000234 	.word	0x20000234
 8000854:	40003800 	.word	0x40003800
 8000858:	200002d0 	.word	0x200002d0

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_DMA_Init+0x48>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_DMA_Init+0x48>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_DMA_Init+0x48>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200e      	movs	r0, #14
 8000880:	f000 fb33 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000884:	200e      	movs	r0, #14
 8000886:	f000 fb4c 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	200f      	movs	r0, #15
 8000890:	f000 fb2b 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000894:	200f      	movs	r0, #15
 8000896:	f000 fb44 	bl	8000f22 <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_GPIO_Init+0xb4>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a26      	ldr	r2, [pc, #152]	; (800095c <MX_GPIO_Init+0xb4>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_GPIO_Init+0xb4>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_GPIO_Init+0xb4>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <MX_GPIO_Init+0xb4>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_GPIO_Init+0xb4>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_GPIO_Init+0xb4>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <MX_GPIO_Init+0xb4>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0xb4>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2138      	movs	r1, #56	; 0x38
 8000908:	4815      	ldr	r0, [pc, #84]	; (8000960 <MX_GPIO_Init+0xb8>)
 800090a:	f001 f901 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <MX_GPIO_Init+0xbc>)
 8000916:	f001 f8fb 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800091a:	2338      	movs	r3, #56	; 0x38
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_GPIO_Init+0xb8>)
 8000932:	f000 ff59 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_GPIO_Init+0xbc>)
 8000950:	f000 ff4a 	bl	80017e8 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	40011000 	.word	0x40011000
 8000964:	40010c00 	.word	0x40010c00

08000968 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// SPI transmission callback - called when UpdateScreen() completes to update OLED display from buffer
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef* pSpi2_oledWrite) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	// Set the SSD1306 state to ready
	SSD1306_Disp.state = SSD1306_STATE_READY;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_SPI_TxCpltCallback+0x18>)
 8000972:	2200      	movs	r2, #0
 8000974:	719a      	strb	r2, [r3, #6]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000314 	.word	0x20000314

08000984 <SPI2_IRQHandler>:

void DMA1_Stream4_IRQHandler(void) {
	HAL_DMA_IRQHandler(&hdma_spi2_tx);
}
void SPI2_IRQHandler(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&Spi_ssd1306Write);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <SPI2_IRQHandler+0x10>)
 800098a:	f001 ff51 	bl	8002830 <HAL_SPI_IRQHandler>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000234 	.word	0x20000234

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2110      	movs	r1, #16
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <Error_Handler+0x20>)
 80009a6:	f001 f8b3 	bl	8001b10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2120      	movs	r1, #32
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <Error_Handler+0x20>)
 80009b0:	f001 f8ae 	bl	8001b10 <HAL_GPIO_WritePin>
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x1c>
 80009b6:	bf00      	nop
 80009b8:	40011000 	.word	0x40011000

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_MspInit+0x5c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_MspInit+0x5c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_MspInit+0x5c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x5c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_MspInit+0x60>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_MspInit+0x60>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010000 	.word	0x40010000

08000a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a42      	ldr	r2, [pc, #264]	; (8000b44 <HAL_SPI_MspInit+0x124>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d17d      	bne.n	8000b3c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a40      	ldr	r2, [pc, #256]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b3b      	ldr	r3, [pc, #236]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a3a      	ldr	r2, [pc, #232]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <HAL_SPI_MspInit+0x128>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a70:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4831      	ldr	r0, [pc, #196]	; (8000b4c <HAL_SPI_MspInit+0x12c>)
 8000a86:	f000 feaf 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482b      	ldr	r0, [pc, #172]	; (8000b4c <HAL_SPI_MspInit+0x12c>)
 8000aa0:	f000 fea2 	bl	80017e8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000aa6:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <HAL_SPI_MspInit+0x134>)
 8000aa8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ad4:	481e      	ldr	r0, [pc, #120]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ad6:	f000 fa3f 	bl	8000f58 <HAL_DMA_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000ae0:	f7ff ff5a 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000ae8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_SPI_MspInit+0x130>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000af2:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_SPI_MspInit+0x13c>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b16:	2220      	movs	r2, #32
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b22:	f000 fa19 	bl	8000f58 <HAL_DMA_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000b2c:	f7ff ff34 	bl	8000998 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b34:	649a      	str	r2, [r3, #72]	; 0x48
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_SPI_MspInit+0x138>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40003800 	.word	0x40003800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	2000028c 	.word	0x2000028c
 8000b54:	40020044 	.word	0x40020044
 8000b58:	200002d0 	.word	0x200002d0
 8000b5c:	40020058 	.word	0x40020058

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f889 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Channel4_IRQHandler+0x10>)
 8000bb6:	f000 fbad 	bl	8001314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000028c 	.word	0x2000028c

08000bc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Channel5_IRQHandler+0x10>)
 8000bca:	f000 fba3 	bl	8001314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002d0 	.word	0x200002d0

08000bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0a:	f7ff ffe5 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 f84f 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff fd3f 	bl	8000694 <main>
  bx lr
 8000c16:	4770      	bx	lr
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c20:	080034c4 	.word	0x080034c4
  ldr r2, =_sbss
 8000c24:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c28:	20000320 	.word	0x20000320

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x28>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f947 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff feb6 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f95f 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f927 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	20000010 	.word	0x20000010

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000014 	.word	0x20000014
 8000cdc:	2000031c 	.word	0x2000031c

08000ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	2000031c 	.word	0x2000031c

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000014 	.word	0x20000014

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4906      	ldr	r1, [pc, #24]	; (8000dd4 <__NVIC_EnableIRQ+0x34>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff90 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff2d 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff42 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff90 	bl	8000e2c <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5f 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff35 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa2 	bl	8000e90 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e059      	b.n	8001022 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_DMA_Init+0xd4>)
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d80f      	bhi.n	8000f9a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_DMA_Init+0xd8>)
 8000f82:	4413      	add	r3, r2
 8000f84:	4a2b      	ldr	r2, [pc, #172]	; (8001034 <HAL_DMA_Init+0xdc>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	009a      	lsls	r2, r3, #2
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <HAL_DMA_Init+0xe0>)
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f98:	e00e      	b.n	8000fb8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_DMA_Init+0xe4>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_DMA_Init+0xdc>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	009a      	lsls	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <HAL_DMA_Init+0xe8>)
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40020407 	.word	0x40020407
 8001030:	bffdfff8 	.word	0xbffdfff8
 8001034:	cccccccd 	.word	0xcccccccd
 8001038:	40020000 	.word	0x40020000
 800103c:	bffdfbf8 	.word	0xbffdfbf8
 8001040:	40020400 	.word	0x40020400

08001044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_DMA_Start_IT+0x20>
 8001060:	2302      	movs	r3, #2
 8001062:	e04a      	b.n	80010fa <HAL_DMA_Start_IT+0xb6>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001072:	2b01      	cmp	r3, #1
 8001074:	d13a      	bne.n	80010ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2202      	movs	r2, #2
 800107a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fb76 	bl	800178c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 020e 	orr.w	r2, r2, #14
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e00f      	b.n	80010da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 020a 	orr.w	r2, r2, #10
 80010d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0201 	orr.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e005      	b.n	80010f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010f4:	2302      	movs	r3, #2
 80010f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001116:	2b02      	cmp	r3, #2
 8001118:	d005      	beq.n	8001126 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2204      	movs	r2, #4
 800111e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e0d6      	b.n	80012d4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b64      	ldr	r3, [pc, #400]	; (80012e0 <HAL_DMA_Abort_IT+0x1dc>)
 800114e:	429a      	cmp	r2, r3
 8001150:	d958      	bls.n	8001204 <HAL_DMA_Abort_IT+0x100>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a63      	ldr	r2, [pc, #396]	; (80012e4 <HAL_DMA_Abort_IT+0x1e0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04f      	beq.n	80011fc <HAL_DMA_Abort_IT+0xf8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <HAL_DMA_Abort_IT+0x1e4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d048      	beq.n	80011f8 <HAL_DMA_Abort_IT+0xf4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a60      	ldr	r2, [pc, #384]	; (80012ec <HAL_DMA_Abort_IT+0x1e8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d040      	beq.n	80011f2 <HAL_DMA_Abort_IT+0xee>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <HAL_DMA_Abort_IT+0x1ec>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d038      	beq.n	80011ec <HAL_DMA_Abort_IT+0xe8>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <HAL_DMA_Abort_IT+0x1f0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d030      	beq.n	80011e6 <HAL_DMA_Abort_IT+0xe2>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_DMA_Abort_IT+0x1f4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d028      	beq.n	80011e0 <HAL_DMA_Abort_IT+0xdc>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a53      	ldr	r2, [pc, #332]	; (80012e0 <HAL_DMA_Abort_IT+0x1dc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d020      	beq.n	80011da <HAL_DMA_Abort_IT+0xd6>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_DMA_Abort_IT+0x1f8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_DMA_Abort_IT+0xd2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_DMA_Abort_IT+0x1fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d012      	beq.n	80011d2 <HAL_DMA_Abort_IT+0xce>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a54      	ldr	r2, [pc, #336]	; (8001304 <HAL_DMA_Abort_IT+0x200>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00a      	beq.n	80011cc <HAL_DMA_Abort_IT+0xc8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a53      	ldr	r2, [pc, #332]	; (8001308 <HAL_DMA_Abort_IT+0x204>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d102      	bne.n	80011c6 <HAL_DMA_Abort_IT+0xc2>
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	e01b      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ca:	e018      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d0:	e015      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011d2:	2310      	movs	r3, #16
 80011d4:	e013      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e011      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011de:	e00e      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e4:	e00b      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ea:	e008      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	e005      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	e002      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011f8:	2310      	movs	r3, #16
 80011fa:	e000      	b.n	80011fe <HAL_DMA_Abort_IT+0xfa>
 80011fc:	2301      	movs	r3, #1
 80011fe:	4a43      	ldr	r2, [pc, #268]	; (800130c <HAL_DMA_Abort_IT+0x208>)
 8001200:	6053      	str	r3, [r2, #4]
 8001202:	e057      	b.n	80012b4 <HAL_DMA_Abort_IT+0x1b0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <HAL_DMA_Abort_IT+0x1e0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d04f      	beq.n	80012ae <HAL_DMA_Abort_IT+0x1aa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <HAL_DMA_Abort_IT+0x1e4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d048      	beq.n	80012aa <HAL_DMA_Abort_IT+0x1a6>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <HAL_DMA_Abort_IT+0x1e8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d040      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x1a0>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_DMA_Abort_IT+0x1ec>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d038      	beq.n	800129e <HAL_DMA_Abort_IT+0x19a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a30      	ldr	r2, [pc, #192]	; (80012f4 <HAL_DMA_Abort_IT+0x1f0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d030      	beq.n	8001298 <HAL_DMA_Abort_IT+0x194>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <HAL_DMA_Abort_IT+0x1f4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d028      	beq.n	8001292 <HAL_DMA_Abort_IT+0x18e>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <HAL_DMA_Abort_IT+0x1dc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d020      	beq.n	800128c <HAL_DMA_Abort_IT+0x188>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <HAL_DMA_Abort_IT+0x1f8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_DMA_Abort_IT+0x184>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a29      	ldr	r2, [pc, #164]	; (8001300 <HAL_DMA_Abort_IT+0x1fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d012      	beq.n	8001284 <HAL_DMA_Abort_IT+0x180>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <HAL_DMA_Abort_IT+0x200>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00a      	beq.n	800127e <HAL_DMA_Abort_IT+0x17a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_DMA_Abort_IT+0x204>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d102      	bne.n	8001278 <HAL_DMA_Abort_IT+0x174>
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	e01b      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	e018      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	e015      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 8001284:	2310      	movs	r3, #16
 8001286:	e013      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 8001288:	2301      	movs	r3, #1
 800128a:	e011      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 800128c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001290:	e00e      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 8001292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001296:	e00b      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	e008      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	e005      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	e002      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 80012aa:	2310      	movs	r3, #16
 80012ac:	e000      	b.n	80012b0 <HAL_DMA_Abort_IT+0x1ac>
 80012ae:	2301      	movs	r3, #1
 80012b0:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_DMA_Abort_IT+0x20c>)
 80012b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
    } 
  }
  return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020080 	.word	0x40020080
 80012e4:	40020008 	.word	0x40020008
 80012e8:	4002001c 	.word	0x4002001c
 80012ec:	40020030 	.word	0x40020030
 80012f0:	40020044 	.word	0x40020044
 80012f4:	40020058 	.word	0x40020058
 80012f8:	4002006c 	.word	0x4002006c
 80012fc:	40020408 	.word	0x40020408
 8001300:	4002041c 	.word	0x4002041c
 8001304:	40020430 	.word	0x40020430
 8001308:	40020444 	.word	0x40020444
 800130c:	40020400 	.word	0x40020400
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	2204      	movs	r2, #4
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80f1 	beq.w	8001520 <HAL_DMA_IRQHandler+0x20c>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80eb 	beq.w	8001520 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0204 	bic.w	r2, r2, #4
 8001366:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <HAL_DMA_IRQHandler+0x1d8>)
 8001370:	429a      	cmp	r2, r3
 8001372:	d958      	bls.n	8001426 <HAL_DMA_IRQHandler+0x112>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <HAL_DMA_IRQHandler+0x1dc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d04f      	beq.n	800141e <HAL_DMA_IRQHandler+0x10a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5c      	ldr	r2, [pc, #368]	; (80014f4 <HAL_DMA_IRQHandler+0x1e0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d048      	beq.n	800141a <HAL_DMA_IRQHandler+0x106>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <HAL_DMA_IRQHandler+0x1e4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d040      	beq.n	8001414 <HAL_DMA_IRQHandler+0x100>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <HAL_DMA_IRQHandler+0x1e8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d038      	beq.n	800140e <HAL_DMA_IRQHandler+0xfa>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a57      	ldr	r2, [pc, #348]	; (8001500 <HAL_DMA_IRQHandler+0x1ec>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d030      	beq.n	8001408 <HAL_DMA_IRQHandler+0xf4>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a56      	ldr	r2, [pc, #344]	; (8001504 <HAL_DMA_IRQHandler+0x1f0>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d028      	beq.n	8001402 <HAL_DMA_IRQHandler+0xee>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_DMA_IRQHandler+0x1d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d020      	beq.n	80013fc <HAL_DMA_IRQHandler+0xe8>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_DMA_IRQHandler+0x1f4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d019      	beq.n	80013f8 <HAL_DMA_IRQHandler+0xe4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_DMA_IRQHandler+0x1f8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d012      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xe0>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a4f      	ldr	r2, [pc, #316]	; (8001510 <HAL_DMA_IRQHandler+0x1fc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00a      	beq.n	80013ee <HAL_DMA_IRQHandler+0xda>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_DMA_IRQHandler+0x200>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d102      	bne.n	80013e8 <HAL_DMA_IRQHandler+0xd4>
 80013e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e6:	e01b      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 80013e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013ec:	e018      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	e015      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	e013      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e011      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 80013fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001400:	e00e      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 8001402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001406:	e00b      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 8001408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800140c:	e008      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 800140e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001412:	e005      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	e002      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	e000      	b.n	8001420 <HAL_DMA_IRQHandler+0x10c>
 800141e:	2304      	movs	r3, #4
 8001420:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <HAL_DMA_IRQHandler+0x204>)
 8001422:	6053      	str	r3, [r2, #4]
 8001424:	e057      	b.n	80014d6 <HAL_DMA_IRQHandler+0x1c2>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <HAL_DMA_IRQHandler+0x1dc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04f      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x1bc>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <HAL_DMA_IRQHandler+0x1e0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d048      	beq.n	80014cc <HAL_DMA_IRQHandler+0x1b8>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_DMA_IRQHandler+0x1e4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d040      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x1b2>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <HAL_DMA_IRQHandler+0x1e8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d038      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x1ac>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <HAL_DMA_IRQHandler+0x1ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d030      	beq.n	80014ba <HAL_DMA_IRQHandler+0x1a6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a29      	ldr	r2, [pc, #164]	; (8001504 <HAL_DMA_IRQHandler+0x1f0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d028      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x1a0>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_DMA_IRQHandler+0x1d8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d020      	beq.n	80014ae <HAL_DMA_IRQHandler+0x19a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_DMA_IRQHandler+0x1f4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_DMA_IRQHandler+0x196>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_DMA_IRQHandler+0x1f8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d012      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x192>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_DMA_IRQHandler+0x1fc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x18c>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_DMA_IRQHandler+0x200>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d102      	bne.n	800149a <HAL_DMA_IRQHandler+0x186>
 8001494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001498:	e01b      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 800149a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800149e:	e018      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	e015      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	e013      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e011      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014b2:	e00e      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b8:	e00b      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014be:	e008      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014c4:	e005      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	e002      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	e000      	b.n	80014d2 <HAL_DMA_IRQHandler+0x1be>
 80014d0:	2304      	movs	r3, #4
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_DMA_IRQHandler+0x208>)
 80014d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8136 	beq.w	800174c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	e130      	b.n	800174c <HAL_DMA_IRQHandler+0x438>
 80014ea:	bf00      	nop
 80014ec:	40020080 	.word	0x40020080
 80014f0:	40020008 	.word	0x40020008
 80014f4:	4002001c 	.word	0x4002001c
 80014f8:	40020030 	.word	0x40020030
 80014fc:	40020044 	.word	0x40020044
 8001500:	40020058 	.word	0x40020058
 8001504:	4002006c 	.word	0x4002006c
 8001508:	40020408 	.word	0x40020408
 800150c:	4002041c 	.word	0x4002041c
 8001510:	40020430 	.word	0x40020430
 8001514:	40020444 	.word	0x40020444
 8001518:	40020400 	.word	0x40020400
 800151c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2202      	movs	r2, #2
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80dd 	beq.w	80016ec <HAL_DMA_IRQHandler+0x3d8>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80d7 	beq.w	80016ec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10b      	bne.n	8001564 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 020a 	bic.w	r2, r2, #10
 800155a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <HAL_DMA_IRQHandler+0x444>)
 800156c:	429a      	cmp	r2, r3
 800156e:	d958      	bls.n	8001622 <HAL_DMA_IRQHandler+0x30e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a79      	ldr	r2, [pc, #484]	; (800175c <HAL_DMA_IRQHandler+0x448>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d04f      	beq.n	800161a <HAL_DMA_IRQHandler+0x306>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a78      	ldr	r2, [pc, #480]	; (8001760 <HAL_DMA_IRQHandler+0x44c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d048      	beq.n	8001616 <HAL_DMA_IRQHandler+0x302>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a76      	ldr	r2, [pc, #472]	; (8001764 <HAL_DMA_IRQHandler+0x450>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d040      	beq.n	8001610 <HAL_DMA_IRQHandler+0x2fc>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a75      	ldr	r2, [pc, #468]	; (8001768 <HAL_DMA_IRQHandler+0x454>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d038      	beq.n	800160a <HAL_DMA_IRQHandler+0x2f6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_DMA_IRQHandler+0x458>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d030      	beq.n	8001604 <HAL_DMA_IRQHandler+0x2f0>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a72      	ldr	r2, [pc, #456]	; (8001770 <HAL_DMA_IRQHandler+0x45c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d028      	beq.n	80015fe <HAL_DMA_IRQHandler+0x2ea>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a69      	ldr	r2, [pc, #420]	; (8001758 <HAL_DMA_IRQHandler+0x444>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d020      	beq.n	80015f8 <HAL_DMA_IRQHandler+0x2e4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_DMA_IRQHandler+0x460>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d019      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x2e0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_DMA_IRQHandler+0x464>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d012      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x2dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6b      	ldr	r2, [pc, #428]	; (800177c <HAL_DMA_IRQHandler+0x468>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00a      	beq.n	80015ea <HAL_DMA_IRQHandler+0x2d6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a69      	ldr	r2, [pc, #420]	; (8001780 <HAL_DMA_IRQHandler+0x46c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d102      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x2d0>
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	e01b      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e8:	e018      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ee:	e015      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015f0:	2320      	movs	r3, #32
 80015f2:	e013      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e011      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	e00e      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 80015fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001602:	e00b      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	e008      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 800160a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160e:	e005      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 8001610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001614:	e002      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 8001616:	2320      	movs	r3, #32
 8001618:	e000      	b.n	800161c <HAL_DMA_IRQHandler+0x308>
 800161a:	2302      	movs	r3, #2
 800161c:	4a59      	ldr	r2, [pc, #356]	; (8001784 <HAL_DMA_IRQHandler+0x470>)
 800161e:	6053      	str	r3, [r2, #4]
 8001620:	e057      	b.n	80016d2 <HAL_DMA_IRQHandler+0x3be>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a4d      	ldr	r2, [pc, #308]	; (800175c <HAL_DMA_IRQHandler+0x448>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d04f      	beq.n	80016cc <HAL_DMA_IRQHandler+0x3b8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a4b      	ldr	r2, [pc, #300]	; (8001760 <HAL_DMA_IRQHandler+0x44c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d048      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x3b4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <HAL_DMA_IRQHandler+0x450>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d040      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x3ae>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_DMA_IRQHandler+0x454>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d038      	beq.n	80016bc <HAL_DMA_IRQHandler+0x3a8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_DMA_IRQHandler+0x458>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d030      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x3a2>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a45      	ldr	r2, [pc, #276]	; (8001770 <HAL_DMA_IRQHandler+0x45c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d028      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x39c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <HAL_DMA_IRQHandler+0x444>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d020      	beq.n	80016aa <HAL_DMA_IRQHandler+0x396>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_DMA_IRQHandler+0x460>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x392>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a40      	ldr	r2, [pc, #256]	; (8001778 <HAL_DMA_IRQHandler+0x464>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d012      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x38e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a3e      	ldr	r2, [pc, #248]	; (800177c <HAL_DMA_IRQHandler+0x468>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00a      	beq.n	800169c <HAL_DMA_IRQHandler+0x388>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <HAL_DMA_IRQHandler+0x46c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d102      	bne.n	8001696 <HAL_DMA_IRQHandler+0x382>
 8001690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001694:	e01b      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 8001696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169a:	e018      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 800169c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a0:	e015      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016a2:	2320      	movs	r3, #32
 80016a4:	e013      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e011      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ae:	e00e      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b4:	e00b      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ba:	e008      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c0:	e005      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c6:	e002      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016c8:	2320      	movs	r3, #32
 80016ca:	e000      	b.n	80016ce <HAL_DMA_IRQHandler+0x3ba>
 80016cc:	2302      	movs	r3, #2
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_DMA_IRQHandler+0x474>)
 80016d0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d034      	beq.n	800174c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ea:	e02f      	b.n	800174c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2208      	movs	r2, #8
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d028      	beq.n	800174e <HAL_DMA_IRQHandler+0x43a>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d023      	beq.n	800174e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020e 	bic.w	r2, r2, #14
 8001714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
    }
  }
  return;
 800174c:	bf00      	nop
 800174e:	bf00      	nop
}
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40020080 	.word	0x40020080
 800175c:	40020008 	.word	0x40020008
 8001760:	4002001c 	.word	0x4002001c
 8001764:	40020030 	.word	0x40020030
 8001768:	40020044 	.word	0x40020044
 800176c:	40020058 	.word	0x40020058
 8001770:	4002006c 	.word	0x4002006c
 8001774:	40020408 	.word	0x40020408
 8001778:	4002041c 	.word	0x4002041c
 800177c:	40020430 	.word	0x40020430
 8001780:	40020444 	.word	0x40020444
 8001784:	40020400 	.word	0x40020400
 8001788:	40020000 	.word	0x40020000

0800178c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d108      	bne.n	80017cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ca:	e007      	b.n	80017dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e179      	b.n	8001af0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017fc:	2201      	movs	r2, #1
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8168 	bne.w	8001aea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a96      	ldr	r2, [pc, #600]	; (8001a78 <HAL_GPIO_Init+0x290>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d05e      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001824:	4a94      	ldr	r2, [pc, #592]	; (8001a78 <HAL_GPIO_Init+0x290>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d875      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800182a:	4a94      	ldr	r2, [pc, #592]	; (8001a7c <HAL_GPIO_Init+0x294>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d058      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001830:	4a92      	ldr	r2, [pc, #584]	; (8001a7c <HAL_GPIO_Init+0x294>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d86f      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001836:	4a92      	ldr	r2, [pc, #584]	; (8001a80 <HAL_GPIO_Init+0x298>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d052      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 800183c:	4a90      	ldr	r2, [pc, #576]	; (8001a80 <HAL_GPIO_Init+0x298>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d869      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001842:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <HAL_GPIO_Init+0x29c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d04c      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001848:	4a8e      	ldr	r2, [pc, #568]	; (8001a84 <HAL_GPIO_Init+0x29c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d863      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800184e:	4a8e      	ldr	r2, [pc, #568]	; (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d046      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001854:	4a8c      	ldr	r2, [pc, #560]	; (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d85d      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d82a      	bhi.n	80018b4 <HAL_GPIO_Init+0xcc>
 800185e:	2b12      	cmp	r3, #18
 8001860:	d859      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <HAL_GPIO_Init+0x80>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018bd 	.word	0x080018bd
 8001870:	080018cf 	.word	0x080018cf
 8001874:	08001911 	.word	0x08001911
 8001878:	08001917 	.word	0x08001917
 800187c:	08001917 	.word	0x08001917
 8001880:	08001917 	.word	0x08001917
 8001884:	08001917 	.word	0x08001917
 8001888:	08001917 	.word	0x08001917
 800188c:	08001917 	.word	0x08001917
 8001890:	08001917 	.word	0x08001917
 8001894:	08001917 	.word	0x08001917
 8001898:	08001917 	.word	0x08001917
 800189c:	08001917 	.word	0x08001917
 80018a0:	08001917 	.word	0x08001917
 80018a4:	08001917 	.word	0x08001917
 80018a8:	08001917 	.word	0x08001917
 80018ac:	080018c5 	.word	0x080018c5
 80018b0:	080018d9 	.word	0x080018d9
 80018b4:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_GPIO_Init+0x2a4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ba:	e02c      	b.n	8001916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e029      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	3304      	adds	r3, #4
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e024      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3308      	adds	r3, #8
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e01f      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	330c      	adds	r3, #12
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e01a      	b.n	8001918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ea:	2304      	movs	r3, #4
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e013      	b.n	8001918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	611a      	str	r2, [r3, #16]
          break;
 8001902:	e009      	b.n	8001918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	615a      	str	r2, [r3, #20]
          break;
 800190e:	e003      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x130>
          break;
 8001916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d801      	bhi.n	8001922 <HAL_GPIO_Init+0x13a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_Init+0x13e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d802      	bhi.n	8001934 <HAL_GPIO_Init+0x14c>
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x152>
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3b08      	subs	r3, #8
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	210f      	movs	r1, #15
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80c1 	beq.w	8001aea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <HAL_GPIO_Init+0x2ac>)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3c      	ldr	r2, [pc, #240]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d01f      	beq.n	80019ec <HAL_GPIO_Init+0x204>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x2b4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d019      	beq.n	80019e8 <HAL_GPIO_Init+0x200>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3a      	ldr	r2, [pc, #232]	; (8001aa0 <HAL_GPIO_Init+0x2b8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_GPIO_Init+0x1fc>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a39      	ldr	r2, [pc, #228]	; (8001aa4 <HAL_GPIO_Init+0x2bc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1f8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <HAL_GPIO_Init+0x2c0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1f4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_GPIO_Init+0x2c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1f0>
 80019d4:	2305      	movs	r3, #5
 80019d6:	e00a      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019d8:	2306      	movs	r3, #6
 80019da:	e008      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019dc:	2304      	movs	r3, #4
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x206>
 80019ec:	2300      	movs	r3, #0
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fe:	4925      	ldr	r1, [pc, #148]	; (8001a94 <HAL_GPIO_Init+0x2ac>)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	491a      	ldr	r1, [pc, #104]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d025      	beq.n	8001ab4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4910      	ldr	r1, [pc, #64]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
 8001a74:	e025      	b.n	8001ac2 <HAL_GPIO_Init+0x2da>
 8001a76:	bf00      	nop
 8001a78:	10320000 	.word	0x10320000
 8001a7c:	10310000 	.word	0x10310000
 8001a80:	10220000 	.word	0x10220000
 8001a84:	10210000 	.word	0x10210000
 8001a88:	10120000 	.word	0x10120000
 8001a8c:	10110000 	.word	0x10110000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40011400 	.word	0x40011400
 8001aa8:	40011800 	.word	0x40011800
 8001aac:	40011c00 	.word	0x40011c00
 8001ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4913      	ldr	r1, [pc, #76]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f ae7e 	bne.w	80017fc <HAL_GPIO_Init+0x14>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	372c      	adds	r7, #44	; 0x2c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43d9      	mvns	r1, r3
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	400b      	ands	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	611a      	str	r2, [r3, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e272      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8087 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00c      	beq.n	8001bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ba0:	4b8f      	ldr	r3, [pc, #572]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d112      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d168      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e24c      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x76>
 8001bdc:	4b80      	ldr	r3, [pc, #512]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e02e      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b78      	ldr	r3, [pc, #480]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0xbc>
 8001c16:	4b72      	ldr	r3, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6f      	ldr	r3, [pc, #444]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6e      	ldr	r2, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xd4>
 8001c30:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a67      	ldr	r2, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f846 	bl	8000ce0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f842 	bl	8000ce0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e200      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe4>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f832 	bl	8000ce0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f82e 	bl	8000ce0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1ec      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x10c>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
 8001cc6:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1c0      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4939      	ldr	r1, [pc, #228]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ffe7 	bl	8000ce0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d16:	f7fe ffe3 	bl	8000ce0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1a1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe ffc6 	bl	8000ce0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d58:	f7fe ffc2 	bl	8000ce0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e180      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03a      	beq.n	8001df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d019      	beq.n	8001dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7fe ffa6 	bl	8000ce0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe ffa2 	bl	8000ce0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e160      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f000 faa6 	bl	8002308 <RCC_Delay>
 8001dbc:	e01c      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7fe ff8c 	bl	8000ce0 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7fe ff88 	bl	8000ce0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e146      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	42420000 	.word	0x42420000
 8001de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e9      	bne.n	8001dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a6 	beq.w	8001f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a87      	ldr	r2, [pc, #540]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ff49 	bl	8000ce0 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7fe ff45 	bl	8000ce0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e103      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b75      	ldr	r3, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x4c8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x312>
 8001e78:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	e02d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a69      	ldr	r2, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x356>
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a60      	ldr	r2, [pc, #384]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	4b5e      	ldr	r3, [pc, #376]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a5d      	ldr	r2, [pc, #372]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x36e>
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	4b58      	ldr	r3, [pc, #352]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a57      	ldr	r2, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d015      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7fe fef9 	bl	8000ce0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fef5 	bl	8000ce0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0b1      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ee      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37e>
 8001f14:	e014      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7fe fee3 	bl	8000ce0 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fedf 	bl	8000ce0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e09b      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	4b40      	ldr	r3, [pc, #256]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a3b      	ldr	r2, [pc, #236]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5c:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d061      	beq.n	800202c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d146      	bne.n	8001ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b33      	ldr	r3, [pc, #204]	; (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe feb3 	bl	8000ce0 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe feaf 	bl	8000ce0 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e06d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4921      	ldr	r1, [pc, #132]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a19      	ldr	r1, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	491b      	ldr	r1, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fe83 	bl	8000ce0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7fe fe7f 	bl	8000ce0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03d      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x46a>
 8001ffc:	e035      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_RCC_OscConfig+0x4cc>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fe6c 	bl	8000ce0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7fe fe68 	bl	8000ce0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e026      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x498>
 800202a:	e01e      	b.n	800206a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e019      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
 8002038:	40021000 	.word	0x40021000
 800203c:	40007000 	.word	0x40007000
 8002040:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_OscConfig+0x500>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	429a      	cmp	r2, r3
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d0      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b67      	ldr	r3, [pc, #412]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4965      	ldr	r1, [pc, #404]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b63      	ldr	r3, [pc, #396]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	494d      	ldr	r1, [pc, #308]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d040      	beq.n	8002198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d115      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e07f      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e073      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06b      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4936      	ldr	r1, [pc, #216]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002168:	f7fe fdba 	bl	8000ce0 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7fe fdb6 	bl	8000ce0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e053      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	429a      	cmp	r2, r3
 8002196:	d1eb      	bne.n	8002170 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d210      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4922      	ldr	r1, [pc, #136]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e032      	b.n	800222e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4916      	ldr	r1, [pc, #88]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002206:	f000 f821 	bl	800224c <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490a      	ldr	r1, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1cc>)
 8002220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x1d0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd18 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40022000 	.word	0x40022000
 800223c:	40021000 	.word	0x40021000
 8002240:	080034ac 	.word	0x080034ac
 8002244:	2000000c 	.word	0x2000000c
 8002248:	20000010 	.word	0x20000010

0800224c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800224c:	b490      	push	{r4, r7}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002254:	1d3c      	adds	r4, r7, #4
 8002256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800225c:	f240 2301 	movw	r3, #513	; 0x201
 8002260:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b04      	cmp	r3, #4
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x40>
 8002286:	2b08      	cmp	r3, #8
 8002288:	d003      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x46>
 800228a:	e02b      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb4>)
 800228e:	623b      	str	r3, [r7, #32]
      break;
 8002290:	e02b      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	0c9b      	lsrs	r3, r3, #18
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3328      	adds	r3, #40	; 0x28
 800229c:	443b      	add	r3, r7
 800229e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d012      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0c5b      	lsrs	r3, r3, #17
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	3328      	adds	r3, #40	; 0x28
 80022ba:	443b      	add	r3, r7
 80022bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c6:	fb03 f202 	mul.w	r2, r3, r2
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	e004      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	623b      	str	r3, [r7, #32]
      break;
 80022e2:	e002      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc90      	pop	{r4, r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	08002d30 	.word	0x08002d30
 80022fc:	40021000 	.word	0x40021000
 8002300:	007a1200 	.word	0x007a1200
 8002304:	003d0900 	.word	0x003d0900

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	2000000c 	.word	0x2000000c
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e076      	b.n	8002444 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d108      	bne.n	8002370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002366:	d009      	beq.n	800237c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
 800236e:	e005      	b.n	800237c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fb42 	bl	8000a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	0c1a      	lsrs	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f002 0204 	and.w	r2, r2, #4
 8002422:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_SPI_Transmit+0x22>
 800246a:	2302      	movs	r3, #2
 800246c:	e126      	b.n	80026bc <HAL_SPI_Transmit+0x270>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002476:	f7fe fc33 	bl	8000ce0 <HAL_GetTick>
 800247a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002490:	e10b      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0x52>
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024a2:	e102      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2203      	movs	r2, #3
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d10f      	bne.n	800250c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800250a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d007      	beq.n	800252a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d14b      	bne.n	80025cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_Transmit+0xf6>
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d13e      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002566:	e02b      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d112      	bne.n	800259c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	1c9a      	adds	r2, r3, #2
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	86da      	strh	r2, [r3, #54]	; 0x36
 800259a:	e011      	b.n	80025c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800259c:	f7fe fba0 	bl	8000ce0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d803      	bhi.n	80025b4 <HAL_SPI_Transmit+0x168>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d102      	bne.n	80025ba <HAL_SPI_Transmit+0x16e>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025be:	e074      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ce      	bne.n	8002568 <HAL_SPI_Transmit+0x11c>
 80025ca:	e04c      	b.n	8002666 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Transmit+0x18e>
 80025d4:	8afb      	ldrh	r3, [r7, #22]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d140      	bne.n	800265c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002600:	e02c      	b.n	800265c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d113      	bne.n	8002638 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
 8002636:	e011      	b.n	800265c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002638:	f7fe fb52 	bl	8000ce0 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d803      	bhi.n	8002650 <HAL_SPI_Transmit+0x204>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d102      	bne.n	8002656 <HAL_SPI_Transmit+0x20a>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800265a:	e026      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cd      	bne.n	8002602 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb02 	bl	8002c74 <SPI_EndRxTxTransaction>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e000      	b.n	80026aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80026a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_SPI_Transmit_DMA+0x20>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e09b      	b.n	800281c <HAL_SPI_Transmit_DMA+0x158>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
 80026fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026fc:	e089      	b.n	8002812 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit_DMA+0x46>
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800270e:	e080      	b.n	8002812 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2203      	movs	r2, #3
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002756:	d10f      	bne.n	8002778 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002776:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <HAL_SPI_Transmit_DMA+0x160>)
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_SPI_Transmit_DMA+0x164>)
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_SPI_Transmit_DMA+0x168>)
 800278e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002794:	2200      	movs	r2, #0
 8002796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4619      	mov	r1, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80027b0:	f7fe fc48 	bl	8001044 <HAL_DMA_Start_IT>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80027d2:	e01e      	b.n	8002812 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d007      	beq.n	80027f2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0202 	orr.w	r2, r2, #2
 8002810:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	08002ae1 	.word	0x08002ae1
 8002828:	08002a3b 	.word	0x08002a3b
 800282c:	08002afd 	.word	0x08002afd

08002830 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
    return;
 8002872:	e0be      	b.n	80029f2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_SPI_IRQHandler+0x66>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	09db      	lsrs	r3, r3, #7
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
    return;
 8002894:	e0ad      	b.n	80029f2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_SPI_IRQHandler+0x80>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80a1 	beq.w	80029f2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 809a 	beq.w	80029f2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d023      	beq.n	8002912 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d011      	beq.n	80028fa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e00b      	b.n	8002912 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
        return;
 8002910:	e06f      	b.n	80029f2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d014      	beq.n	8002948 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	2b00      	cmp	r3, #0
 800294e:	d04f      	beq.n	80029f0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800295e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d104      	bne.n	800297c <HAL_SPI_IRQHandler+0x14c>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d034      	beq.n	80029e6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0203 	bic.w	r2, r2, #3
 800298a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d011      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_SPI_IRQHandler+0x1c8>)
 800299a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fbaf 	bl	8001104 <HAL_DMA_Abort_IT>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c4:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_SPI_IRQHandler+0x1c8>)
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fb99 	bl	8001104 <HAL_DMA_Abort_IT>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00a      	beq.n	80029ee <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80029e4:	e003      	b.n	80029ee <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f811 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029ec:	e000      	b.n	80029f0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80029ee:	bf00      	nop
    return;
 80029f0:	bf00      	nop
  }
}
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	08002b3d 	.word	0x08002b3d

080029fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2e:	b2db      	uxtb	r3, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a48:	f7fe f94a 	bl	8000ce0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d03b      	beq.n	8002ad4 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0220 	bic.w	r2, r2, #32
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0202 	bic.w	r2, r2, #2
 8002a7a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	2164      	movs	r1, #100	; 0x64
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f000 f8f7 	bl	8002c74 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f7ff ff9e 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ad2:	e002      	b.n	8002ada <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7fd ff47 	bl	8000968 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ff84 	bl	80029fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0203 	bic.w	r2, r2, #3
 8002b18:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0210 	orr.w	r2, r3, #16
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff6d 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ff59 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b74:	f7fe f8b4 	bl	8000ce0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b84:	f7fe f8ac 	bl	8000ce0 <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	0d1b      	lsrs	r3, r3, #20
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9a:	e054      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d050      	beq.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ba4:	f7fe f89c 	bl	8000ce0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d902      	bls.n	8002bba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d13d      	bne.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd2:	d111      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d004      	beq.n	8002be8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d107      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d10f      	bne.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e017      	b.n	8002c66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d19b      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000000c 	.word	0x2000000c

08002c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff ff6a 	bl	8002b64 <SPI_WaitFlagStateUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e000      	b.n	8002ca8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	4d0c      	ldr	r5, [pc, #48]	; (8002ce8 <__libc_init_array+0x38>)
 8002cb6:	4c0d      	ldr	r4, [pc, #52]	; (8002cec <__libc_init_array+0x3c>)
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	f000 f822 	bl	8002d08 <_init>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	4d0a      	ldr	r5, [pc, #40]	; (8002cf0 <__libc_init_array+0x40>)
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <__libc_init_array+0x44>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	080034bc 	.word	0x080034bc
 8002cec:	080034bc 	.word	0x080034bc
 8002cf0:	080034bc 	.word	0x080034bc
 8002cf4:	080034c0 	.word	0x080034c0

08002cf8 <memset>:
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <memset+0xa>
 8002d00:	4770      	bx	lr
 8002d02:	f803 1b01 	strb.w	r1, [r3], #1
 8002d06:	e7f9      	b.n	8002cfc <memset+0x4>

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
